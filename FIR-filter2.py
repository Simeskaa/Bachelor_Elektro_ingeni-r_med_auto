from numpy import sin, cos, pi, exp, empty, mean, abs, angle # Sentrale matematiske funksjoner
import numpy as np                          # Importer funksjonalitet fra numpy biblioteket med prefiks "np"
import scipy.signal as sig                  # Importerer signalbehandlingsmodulen til scipy
import matplotlib.pyplot as plt             # Importer pyplot modulen i matplotlib med prefiks "plt"
from scipy.io import wavfile
from scipy.io.wavfile import write

#samplerate, data = wavfile.read('lyd_filer/Noise.wav')
samplerate, data = wavfile.read('lyd_filer/140Hz n noise.wav')
xn_rx = data.T / 0x7FFF

def resize(a:list, old_size:int, new_size:int):
    a_new = []
    for i in range(len(a)):
        if (i % (old_size//new_size)) == 0:
            a_new.append(a[i])
    return a_new

def IIR_filter(x: float):
    b = [0.000000000000000,
     0.004405638449924,
     0.015023539657151,
     0.003217890179612]

    a = [1.000000000000000,
         -2.376802064798698,
         1.932937224176488,
         -0.533488091091103]

    M = 3
    x_buffer = [0] * M
    y_buffer = [0] * M

    # Regn ut verdien av y
    y = x * b[0]
    for i in range(M):
        y += b[i + 1] * x_buffer[i]
        y -= a[i + 1] * y_buffer[i]
    y /= a[0]

    #Oppdatere buffere
    x_buffer.remove(x_buffer[0])
    x_buffer.append(x)

    y_buffer.remove(y_buffer[0])
    y_buffer.append(y)
    return y

def FIR_filter(x: float):
    fs = 22050
    fzero = 50
    L = fs//fzero
    w_bp = 1000/fs*2*np.pi

    hn = np.ones(L)/L
    hn_bp = cos(w_bp*np.arange(L))*sig.hamming(L) #multipliser med 2 for å svare på spørmål b)
    y = sig.convolve(x, hn_bp)

    # Vis Styrkegradsresponse
    if True:
        w, Hw = sig.freqz(b = hn_bp, fs=fs, worN=4096)  # Regn ut frekvensresponsen til filteret
        Hw_amp = np.abs(Hw)
        Hw_phase = (np.angle(Hw))



        # Presenter frekvensresponsen grafisk.
        plt.close(1); plt.figure(1, figsize=(14,5))
        plt.subplot(2, 2, 1); plt.xlim([50, 1100]); plt.grid(True); plt.plot(w, Hw_amp)
        plt.title(r'Frekvensrespons')
        plt.ylabel(r'Styrkegrad')

        # Presenter frekvensresponsen grafisk.
        plt.subplot(2, 2, 3); plt.xlim([50, 1100]); plt.grid(True); plt.plot(w, Hw_phase)
        plt.title(r'Faseresponse')
        plt.ylabel(r'Angle')

        if True:
            X = np.fft.fft(x)
            #X = np.fft.fftshift(X)
            ### Hent ut 1000 Hz informasjon
            N = len(X)
            k_bp = 1000/fs*N
            print(k_bp, np.abs(X[round(k_bp)]))
            Y = np.fft.fft(y)
            #Y = np.fft.fftshift(Y)
            samples = np.linspace(0, 2, 7)*len(x)
            #peaks, _ = sig.find_peaks(abs(Y), distance=50000)

            plt.subplot(2, 2, 2);  plt.xticks(samples, [r'$'+str(round(i,2))+'\pi$' for i in np.linspace(0, 2, 7)])
            plt.semilogy(abs(X))
            plt.title(r'FFT X')

            plt.subplot(2, 2, 4); plt.xticks(samples, [r'$'+str(round(i,2))+'\pi$' for i in np.linspace(0, 2, 7)])
            plt.semilogy(abs(Y))
            #plt.stem(peaks, X[peaks], "x")
            plt.legend()
            plt.title(r'FFT Y')



        plt.tight_layout()
        plt.show()



    # Vis Frekvensdomene
    if False:
        # Lag figur
        plt.close(2); plt.figure(2)

        XN_RX = np.fft.fft(xn_rx) # Fourier transformerer de beamforma signalene
        Y = np.fft.fft(y)

        #plot før filtrering
        plt.subplot(2,1,1)
        plt.title('Ufiltrert XN')
        plt.xlabel('Vinkelfrekvens')
        plt.grid()
        plt.xticks(np.linspace(0, 1, 7)*len(xn_rx), [r'$'+str(round(i,2))+'\pi$' for i in np.linspace(-1, 1, 7)])
        plt.stem(abs(XN_RX))

        #plot etter filtrering
        plt.subplot(2,1,2)
        plt.title('Filtrert Y')
        plt.xlabel('Vinkelfrekvens')
        plt.grid()
        plt.xticks(np.linspace(0, 1, 7)*len(y), [r'$'+str(round(i,2))+'\pi$' for i in np.linspace(-1, 1, 7)])
        plt.stem(abs(Y))
        plt.show()

    return y

def FIR_filter2(x: float):

    hn = [
      -0.0007523975118029623,
      -0.01094960581783574,
      -0.013842869818593638,
      -0.019926898866304207,
      -0.024575048312386424,
      -0.026607040840587196,
      -0.024906724051053646,
      -0.019070608432511366,
      -0.009692873094479401,
      0.00163083161860868,
      0.01248463805323288,
      0.020194394551224685,
      0.022466048704565873,
      0.01807294737447773,
      0.007400878265218106,
      -0.0074172324398747635,
      -0.022726929577830672,
      -0.03402502688062672,
      -0.036950563532114435,
      -0.0283416109266146,
      -0.007112910502064243,
      0.02525613213838398,
      0.064770881822736,
      0.1055840808172426,
      0.14108743018349548,
      0.16522897170246068,
      0.1737814385064219,
      0.16522897170246068,
      0.14108743018349548,
      0.1055840808172426,
      0.064770881822736,
      0.02525613213838398,
      -0.007112910502064243,
      -0.0283416109266146,
      -0.036950563532114435,
      -0.03402502688062672,
      -0.022726929577830672,
      -0.0074172324398747635,
      0.007400878265218106,
      0.01807294737447773,
      0.022466048704565873,
      0.020194394551224685,
      0.01248463805323288,
      0.00163083161860868,
      -0.009692873094479401,
      -0.019070608432511366,
      -0.024906724051053646,
      -0.026607040840587196,
      -0.024575048312386424,
      -0.019926898866304207,
      -0.013842869818593638,
      -0.01094960581783574,
      -0.0007523975118029623]   # Lowpassfilter  200Hz
    hn2 = [
  -0.0029515027399251155,
  -0.007233980805155983,
  -0.0025271886603023363,
  -0.003887185912769673,
  -0.0010946167433095427,
  0.0011461658474493715,
  0.004223008155656699,
  0.00658224168738503,
  0.007894269608233041,
  0.007529351823191919,
  0.005444262151764241,
  0.0019510959784553856,
  -0.002236008394611836,
  -0.006194778164690555,
  -0.00904031070095177,
  -0.010143213320956978,
  -0.009302050215631739,
  -0.006780498958300419,
  -0.0032115875266638294,
  0.0006120240002542029,
  0.003952964430055505,
  0.00635363242390522,
  0.007687942907909702,
  0.008146944311934303,
  0.008055809182923384,
  0.00766943553530265,
  0.007013267838785453,
  0.005801639282634769,
  0.003565858330621271,
  -0.0001221893172057975,
  -0.005351284131560987,
  -0.011613491848466271,
  -0.017740554654920162,
  -0.022070914785190198,
  -0.02283535543459612,
  -0.018724299627132856,
  -0.009419401486313065,
  0.004058988792032367,
  0.019321595493766983,
  0.033012259982192725,
  0.04155856970553451,
  0.04208554693971032,
  0.03330198476723734,
  0.01606007800631699,
  -0.006614881236283085,
  -0.03002634432358411,
  -0.04884134094929591,
  -0.058380932488958606,
  -0.05581843380750248,
  -0.0410018810672348,
  -0.016656266840673287,
  0.012138105087037578,
  0.03909108869511265,
  0.05817451290294932,
  0.0650603245098816,
  0.05817451290294932,
  0.03909108869511265,
  0.012138105087037578,
  -0.016656266840673287,
  -0.0410018810672348,
  -0.05581843380750248,
  -0.058380932488958606,
  -0.04884134094929591,
  -0.03002634432358411,
  -0.006614881236283085,
  0.01606007800631699,
  0.03330198476723734,
  0.04208554693971032,
  0.04155856970553451,
  0.033012259982192725,
  0.019321595493766983,
  0.004058988792032367,
  -0.009419401486313065,
  -0.018724299627132856,
  -0.02283535543459612,
  -0.022070914785190198,
  -0.017740554654920162,
  -0.011613491848466271,
  -0.005351284131560987,
  -0.0001221893172057975,
  0.003565858330621271,
  0.005801639282634769,
  0.007013267838785453,
  0.00766943553530265,
  0.008055809182923384,
  0.008146944311934303,
  0.007687942907909702,
  0.00635363242390522,
  0.003952964430055505,
  0.0006120240002542029,
  -0.0032115875266638294,
  -0.006780498958300419,
  -0.009302050215631739,
  -0.010143213320956978,
  -0.00904031070095177,
  -0.006194778164690555,
  -0.002236008394611836,
  0.0019510959784553856,
  0.005444262151764241,
  0.007529351823191919,
  0.007894269608233041,
  0.00658224168738503,
  0.004223008155656699,
  0.0011461658474493715,
  -0.0010946167433095427,
  -0.003887185912769673,
  -0.0025271886603023363,
  -0.007233980805155983,
  -0.0029515027399251155]  # Bandpassfilter 120-160Hz
    hn3 = [
  0.02857983994169657,
  -0.07328836181028245,
  0.04512928732568175,
  0.03422632401030237,
  -0.034724262386629436,
  -0.05343090761376418,
  0.032914528649623416,
  0.09880818246272206,
  -0.034135422078843417,
  -0.3160339484471911,
  0.5341936566511765,
  -0.3160339484471911,
  -0.034135422078843417,
  0.09880818246272206,
  0.032914528649623416,
  -0.05343090761376418,
  -0.034724262386629436,
  0.03422632401030237,
  0.04512928732568175,
  -0.07328836181028245,
  0.02857983994169657]  # Høypassfilter  400Hz
    hn4 = [
  -0.0067052113154796285,
  -0.0032274490853311396,
  -0.0019846523377692804,
  0.0008962595882229311,
  0.005035269388590873,
  0.009478743192648947,
  0.012856637796765456,
  0.0137275568148625,
  0.011038549118513452,
  0.004565542473406521,
  -0.004819655161165743,
  -0.015172443222326368,
  -0.023842519691080873,
  -0.02812684956751788,
  -0.026053864005818505,
  -0.017080277879953223,
  -0.002471068413486566,
  0.014800921552759652,
  0.030667688569559894,
  0.04096802879736474,
  0.04258291713247717,
  0.034383787723073836,
  0.01770290123300108,
  -0.003851996845490974,
  -0.02524214237412778,
  -0.041300085238583854,
  -0.04812524494728153,
  -0.04416607838186189,
  -0.030664636642307123,
  -0.011320536959634137,
  0.008774877294207284,
  0.024636886049829363,
  0.032820982560712,
  0.03235876562058358,
  0.024995889340437703,
  0.014407044264549494,
  0.004924161920804238,
  -0.00007921998736943151,
  0.0005770870922755978,
  0.005374060733288632,
  0.010572100103917932,
  0.011570538236413574,
  0.004733369912583746,
  -0.010926908925225055,
  -0.03281096391207337,
  -0.05496592688941891,
  -0.06955491451678279,
  -0.06922225285036203,
  -0.049684226929098275,
  -0.011725110283242298,
  0.038120757625673074,
  0.08857779060626327,
  0.12622040595541412,
  0.13904523924842097,
  0.12006500333012152,
  0.06986752342239981,
  -0.002698605936641777,
  -0.08206895266408339,
  -0.1494845816381689,
  -0.18765733181626176,
  -0.18536606191750746,
  -0.14071609311607305,
  -0.062123872592470236,
  0.03334577663995239,
  0.12395510471814523,
  0.18858613026834828,
  0.21197703847612098,
  0.18858613026834828,
  0.12395510471814523,
  0.03334577663995239,
  -0.062123872592470236,
  -0.14071609311607305,
  -0.18536606191750746,
  -0.18765733181626176,
  -0.1494845816381689,
  -0.08206895266408339,
  -0.002698605936641777,
  0.06986752342239981,
  0.12006500333012152,
  0.13904523924842097,
  0.12622040595541412,
  0.08857779060626327,
  0.038120757625673074,
  -0.011725110283242298,
  -0.049684226929098275,
  -0.06922225285036203,
  -0.06955491451678279,
  -0.05496592688941891,
  -0.03281096391207337,
  -0.010926908925225055,
  0.004733369912583746,
  0.011570538236413574,
  0.010572100103917932,
  0.005374060733288632,
  0.0005770870922755978,
  -0.00007921998736943151,
  0.004924161920804238,
  0.014407044264549494,
  0.024995889340437703,
  0.03235876562058358,
  0.032820982560712,
  0.024636886049829363,
  0.008774877294207284,
  -0.011320536959634137,
  -0.030664636642307123,
  -0.04416607838186189,
  -0.04812524494728153,
  -0.041300085238583854,
  -0.02524214237412778,
  -0.003851996845490974,
  0.01770290123300108,
  0.034383787723073836,
  0.04258291713247717,
  0.04096802879736474,
  0.030667688569559894,
  0.014800921552759652,
  -0.002471068413486566,
  -0.017080277879953223,
  -0.026053864005818505,
  -0.02812684956751788,
  -0.023842519691080873,
  -0.015172443222326368,
  -0.004819655161165743,
  0.004565542473406521,
  0.011038549118513452,
  0.0137275568148625,
  0.012856637796765456,
  0.009478743192648947,
  0.005035269388590873,
  0.0008962595882229311,
  -0.0019846523377692804,
  -0.0032274490853311396,
  -0.0067052113154796285]  # Båndpassfilter med boost 120-160Hz


    yn = np.convolve(hn3, xn_rx)
    if False:
        w, Hw = sig.freqz(b = hn, fs=samplerate, worN=512)  # Regn ut frekvensresponsen til filteret
        Hw_amp = np.abs(Hw)
        Hw_phase = (np.angle(Hw))

        # Presenter frekvensresponsen grafisk.
        plt.close(1); plt.figure(1)
        plt.subplot(2,1,1)
        plt.title(r'Frekvensrespons til digitalt filter')
        plt.plot(w, Hw_amp)
        plt.grid(True)
        plt.ylabel(r'Styrkegrad')

        plt.subplot(2,1,2)
        plt.plot(w, Hw_phase)
        plt.grid(True)
        plt.xlabel(r'Digital Frekvens (Hz)')
        plt.ylabel(r'Fase')
        plt.show()

    return yn


def main():
    yn = FIR_filter(xn_rx)
    write("Middelverdi_bp.wav", samplerate, yn)

    # Plot før og etter av signalet
    if False:
        plt.close(); plt.figure()
        plt.subplot(2, 1, 1)
        plt.plot(np.arange(len(xn_rx)), xn_rx)
        plt.title('Raw signal')
        plt.subplot(2, 1, 2)
        plt.plot(np.arange(len(yn)), yn)
        plt.title('Filtered signal')
        plt.tight_layout()
        plt.show()

    # Filter 1, med basic plotting av ufiltrert of filtrert signal
    if False:
        y = FIR_filter(xn_rx)

        plt.close(); plt.figure(1)
        plt.subplot(2,1,1)
        plt.title('Filtered Signal')
        plt.plot(y)

        plt.subplot(2,1,2)
        plt.title('Raw Signal')
        plt.plot(xn_rx)
        plt.tight_layout()
        plt.show()

if __name__ == '__main__':
    main()


