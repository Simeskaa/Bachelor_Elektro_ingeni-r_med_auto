Index: main/include/GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nfrom PySide6.QtCore import Qt\r\nfrom PySide6.QtGui import QPainter, QPixmap, QColor, QFont, QBrush\r\nfrom PySide6.QtWidgets import QApplication, QLabel, QMainWindow\r\nimport threading\r\nimport time\r\nimport logging\r\nfrom direction_and_distance_estimation import angle_cord_estimation\r\n\r\nclass MainWindow(QMainWindow):\r\n    def __init__(self, range:float = 2000., delay:int = 5):\r\n        super().__init__()\r\n        self.label = QLabel()\r\n        self.canvas = QPixmap(700, 700)\r\n        self.label.setPixmap(self.canvas)\r\n        self.setCentralWidget(self.label)\r\n        self.setFixedSize(700, 700)\r\n        self.radar()\r\n\r\n        self.x_square = []\r\n        self.y_square = []\r\n        self.timer_square = []\r\n        self.red_square = []\r\n        self.blue_square = []\r\n        self.counter_square = 0\r\n        self.counted_square = 0\r\n\r\n        self.x_circle = []\r\n        self.y_circle = []\r\n        self.timer_circle = []\r\n        self.red_circle = []\r\n        self.blue_circle = []\r\n        self.counter_circle = 0\r\n        self.counted_circle = 0\r\n        self.range = range\r\n        self.delay = delay\r\n\r\n        self.lock = threading.Lock()\r\n        x1 = threading.Thread(target=self.removing_from_GUI)\r\n        x1.start()\r\n\r\n\r\n    def radar(self):\r\n        self.canvas.fill(Qt.GlobalColor.white)\r\n        painter = QPainter(self.canvas)\r\n        painter.setPen(QColor(Qt.red))\r\n        painter.setPen(QColor(Qt.red))\r\n        painter.setFont(QFont('Arial', 20))\r\n        painter.drawText(348, 35, \"0\")  # x, y\r\n        painter.drawText(660, 350, \"90\")\r\n        painter.drawText(325, 680, \"180\")\r\n        painter.drawText(1, 350, \"270\")\r\n        painter.setPen(QColor(Qt.black))\r\n        painter.drawEllipse(350, 350, 2, 2)\r\n        painter.drawEllipse(200, 200, 300, 300)\r\n        painter.drawEllipse(50, 50, 600, 600)\r\n        painter.end()\r\n        self.label.setPixmap(self.canvas)\r\n        self.update()\r\n\r\n\r\n    def make_square(self, x, y, color_index:int):\r\n        painter = QPainter(self.canvas)\r\n        brush = QBrush()\r\n        brush.setColor(QColor(self.red_square[color_index], 0, self.blue_square[color_index]))\r\n        brush.setStyle(Qt.BrushStyle.Dense1Pattern)\r\n        painter.setBrush(brush)\r\n        painter.drawRect(x, y, 10, 10)\r\n        painter.end()\r\n        self.label.setPixmap(self.canvas)\r\n        self.update()\r\n\r\n    def make_circle(self, x, y, color_index:int):\r\n        painter = QPainter(self.canvas)\r\n        brush = QBrush()\r\n        brush.setColor(QColor(self.red_circle[color_index], 0, self.blue_circle[color_index]))\r\n        brush.setStyle(Qt.BrushStyle.Dense1Pattern)\r\n        painter.setBrush(brush)\r\n        painter.drawEllipse(x, y, 10, 10)\r\n        painter.end()\r\n        self.label.setPixmap(self.canvas)\r\n        self.update()\r\n\r\n\r\n    def update_GUI(self, x:float, y:float, hz:int, angle_overrule:bool):\r\n        with self.lock:\r\n            if not angle_overrule:\r\n                x_adjusted_square , y_adjusted_square= self.coordinate_center(x=x, y=y)\r\n                self.x_square.append(x_adjusted_square)\r\n                self.y_square.append(y_adjusted_square)\r\n                self.counter_square += 1\r\n                self.timer_square.append(time.perf_counter() + 5)\r\n                if hz == 260:\r\n                    self.red_square.append(0)\r\n                    self.blue_square.append(255)\r\n                elif hz == 440:\r\n                    self.red_square.append(255)\r\n                    self.blue_square.append(0)\r\n\r\n            elif angle_overrule:\r\n                x_adjusted_circle, y_adjusted_circle = self.coordinate_center(x=x, y=y)\r\n                self.x_circle.append(x_adjusted_circle)\r\n                self.y_circle.append(y_adjusted_circle)\r\n                self.counter_circle += 1\r\n                self.timer_circle.append(time.perf_counter() + self.delay)\r\n                if hz == 260:\r\n                    self.red_circle.append(0)\r\n                    self.blue_circle.append(255)\r\n                elif hz == 440:\r\n                    self.red_circle.append(255)\r\n                    self.blue_circle.append(0)\r\n            self.item_placement_on_GUI()\r\n\r\n\r\n    def item_placement_on_GUI(self):\r\n        if self.counter_square > self.counted_square:\r\n            self.make_square(self.x_square[self.counter_square - 1], self.y_square[self.counter_square - 1], color_index=(self.counter_square - 1))\r\n            self.counted_square += 1\r\n\r\n        elif self.counter_circle > self.counted_circle:\r\n            self.make_circle(self.x_circle[self.counter_circle - 1], self.y_circle[self.counter_circle - 1], color_index=(self.counter_circle - 1))\r\n            self.counted_circle += 1\r\n\r\n    def removing_from_GUI(self):\r\n        while True:\r\n            with self.lock:\r\n                if self.counter_square > 0:\r\n                    if self.timer_square[0] < time.perf_counter():\r\n                        self.radar()\r\n                        self.x_square.pop(0)\r\n                        self.y_square.pop(0)\r\n                        self.timer_square.pop(0)\r\n                        self.red_square.pop(0)\r\n                        self.blue_square.pop(0)\r\n                        self.counter_square -= 1\r\n                        self.counted_square -= 1\r\n                        #self.square = True\r\n\r\n                        for i in range(len(self.x_square)):\r\n                            # logging.info(\"Drive_func is about to add remaining boxes\")\r\n                            self.make_square(self.x_square[i], self.y_square[i], color_index=i)\r\n                        #logging.info(\"removing box\")\r\n\r\n                        for i in range(len(self.x_circle)):\r\n                            # logging.info(\"Drive_func is about to add remaining boxes\")\r\n                            self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)\r\n                        #logging.info(\"removed box\")\r\n                        time.sleep(0.5)\r\n\r\n                if self.counter_circle > 0:\r\n                    if self.timer_circle[0] < time.perf_counter():\r\n                        self.radar()\r\n                        self.x_circle.pop(0)\r\n                        self.y_circle.pop(0)\r\n                        self.timer_circle.pop(0)\r\n                        self.red_circle.pop(0)\r\n                        self.blue_circle.pop(0)\r\n                        self.counter_circle -= 1\r\n                        self.counted_circle -= 1\r\n                        #logging.info(\"removing circle\")\r\n\r\n                        for i in range(len(self.x_square)):\r\n                            self.make_square(self.x_square[i], self.y_square[i], color_index=i)\r\n\r\n                        for i in range(len(self.x_circle)):\r\n                            self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)\r\n                        #logging.info(\"removed circle\")\r\n                        time.sleep(0.5)\r\n\r\n\r\n\r\n    def coordinate_center(self, x: float, y: float):  # lag et system hvis x/2000 e Ã¸ve 1\r\n        center_cord_x = (315. * x / self.range) + 340.\r\n        center_cord_y = -(315. * y / self.range) + 340.\r\n        return center_cord_x, center_cord_y\r\n\r\n\r\n\r\ndef test():\r\n    while True:\r\n        time.sleep(3)\r\n        logging.info(\"Thread test is about to update 1\")\r\n        boat_coords_x, boat_coords_y, dist, average_angle, angle_overrule = boat.timestamp_2_cord(simulation('45'))\r\n        window.update_GUI(x= boat_coords_x, y=boat_coords_y, hz= 440, angle_overrule= angle_overrule)\r\n        #logging.info(\"Thread test is updated 1\")\r\n        time.sleep(3)\r\n        #logging.info(\"Thread test is about to update 2\")\r\n        window.update_GUI(x=50, y=50, hz= 260, angle_overrule= False)\r\n        time.sleep(2)\r\n        window.update_GUI(x=1000, y=1000, hz= 440, angle_overrule= True)\r\n        #logging.info(\"Thread test is updated 2\")\r\n        time.sleep(3)\r\n        #logging.info(\"Thread test is about to update 3\")\r\n        window.update_GUI(x=-1500, y=1500, hz= 260, angle_overrule= False)\r\n        #logging.info(\"Thread test is updated 3\")\r\n\r\ndef simulation(boat_placment):\r\n    tdoa_78 = [0, 0.019, 0.029, 0.048]\r\n    tdoa_45 = [0.0, 0.0, 0.03498542274, 0.03498542274]\r\n    tdoa_34 = [0., (1.37 + 0.92) / 343, (1.37 + 0.92 + 9.506) / 343, (1.37 + 0.92 + 9.506 + 1.438 + 0.809) / 343]\r\n\r\n    if boat_placment == '78':\r\n        # static simulate time delay of arrive\r\n        # -------------------------------------------------\r\n        t1 = tdoa_78[0]\r\n        t2 = tdoa_78[1]\r\n        t3 = tdoa_78[2]\r\n        t4 = tdoa_78[3]\r\n        mic = {'m1': t3, 'm2': t4, 'm3': t1, 'm4': t2}\r\n\r\n    if boat_placment == '45':\r\n        t1 = tdoa_45[0]\r\n        t2 = tdoa_45[1]\r\n        t3 = tdoa_45[2]\r\n        t4 = tdoa_45[3]\r\n        mic = {'m1': t3, 'm2': t4, 'm3': t1, 'm4': t2}\r\n\r\n    if boat_placment == '34':\r\n        t1 = tdoa_34[0]\r\n        t2 = tdoa_34[1]\r\n        t3 = tdoa_34[2]\r\n        t4 = tdoa_34[3]\r\n        mic = {'m1': t4, 'm2': t3, 'm3': t2, 'm4': t1}\r\n\r\n    tdoa = [mic['m1'], mic['m3'], mic['m2'], mic['m4']]\r\n\r\n    return tdoa\r\n\r\n\r\n\r\napp = QApplication(sys.argv)\r\nwindow = MainWindow()\r\nboat = angle_cord_estimation(dist_short_mic=12, spd_sound=343, max_distance=2000)\r\n\r\n#window.show()\r\n#x1 = threading.Thread(target=window.upd, args=())\r\nformat = \"%(asctime)s: %(message)s\"\r\n\r\nlogging.basicConfig(format=format, level=logging.INFO, datefmt=\"%H:%M:%S\")\r\n\r\n\r\nx2 = threading.Thread(target=test)\r\n\r\nx2.start()\r\n\r\n\r\nwindow.show()\r\napp.exec()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main/include/GUI.py b/main/include/GUI.py
--- a/main/include/GUI.py	(revision 64423198641c4edb5e5700289fab879b0426bca5)
+++ b/main/include/GUI.py	(date 1682154587959)
@@ -1,12 +1,20 @@
 import sys
-from PySide6.QtCore import Qt
+from PySide6.QtCore import Qt, QTimer, QThreadPool, QRunnable
 from PySide6.QtGui import QPainter, QPixmap, QColor, QFont, QBrush
-from PySide6.QtWidgets import QApplication, QLabel, QMainWindow
+from PySide6.QtWidgets import QApplication, QLabel, QMainWindow, QDial, QPushButton
 import threading
 import time
 import logging
 from direction_and_distance_estimation import angle_cord_estimation
 
+
+# class Worker(QRunnable):
+#     def __init__(self, delete):
+#         super().__init__()
+#         shit = MainWindow()
+#     def run(self):
+#         QTimer.singleShot(1000, )
+
 class MainWindow(QMainWindow):
     def __init__(self, range:float = 2000., delay:int = 5):
         super().__init__()
@@ -35,9 +43,16 @@
         self.range = range
         self.delay = delay
 
-        self.lock = threading.Lock()
-        x1 = threading.Thread(target=self.removing_from_GUI)
-        x1.start()
+        self.threadpool = QThreadPool()
+
+        # self.timer = QTimer()
+        # self.timer.setInterval(5000)
+        # #self.timer.setSingleShot(True)
+        # self.timer.timeout.connect(self.removing_from_GUI)
+        # self.timer.start()
+
+
+        #self.timer = QTimer()  # set up your QTimer
 
 
     def radar(self):
@@ -83,33 +98,41 @@
 
 
     def update_GUI(self, x:float, y:float, hz:int, angle_overrule:bool):
-        with self.lock:
-            if not angle_overrule:
-                x_adjusted_square , y_adjusted_square= self.coordinate_center(x=x, y=y)
-                self.x_square.append(x_adjusted_square)
-                self.y_square.append(y_adjusted_square)
-                self.counter_square += 1
-                self.timer_square.append(time.perf_counter() + 5)
-                if hz == 260:
-                    self.red_square.append(0)
-                    self.blue_square.append(255)
-                elif hz == 440:
-                    self.red_square.append(255)
-                    self.blue_square.append(0)
+        if not angle_overrule:
+            x_adjusted_square , y_adjusted_square= self.coordinate_center(x=x, y=y)
+            self.x_square.append(x_adjusted_square)
+            self.y_square.append(y_adjusted_square)
+            self.counter_square += 1
+            if hz == 260:
+                self.red_square.append(0)
+                self.blue_square.append(255)
+            elif hz == 440:
+                self.red_square.append(255)
+                self.blue_square.append(0)
 
-            elif angle_overrule:
-                x_adjusted_circle, y_adjusted_circle = self.coordinate_center(x=x, y=y)
-                self.x_circle.append(x_adjusted_circle)
-                self.y_circle.append(y_adjusted_circle)
-                self.counter_circle += 1
-                self.timer_circle.append(time.perf_counter() + self.delay)
-                if hz == 260:
-                    self.red_circle.append(0)
-                    self.blue_circle.append(255)
-                elif hz == 440:
-                    self.red_circle.append(255)
-                    self.blue_circle.append(0)
-            self.item_placement_on_GUI()
+        elif angle_overrule:
+            x_adjusted_circle, y_adjusted_circle = self.coordinate_center(x=x, y=y)
+            self.x_circle.append(x_adjusted_circle)
+            self.y_circle.append(y_adjusted_circle)
+            self.counter_circle += 1
+            if hz == 260:
+                self.red_circle.append(0)
+                self.blue_circle.append(255)
+            elif hz == 440:
+                self.red_circle.append(255)
+                self.blue_circle.append(0)
+
+        self.item_placement_on_GUI()
+        pool = QThreadPool.globalInstance()
+        pool.start(QTimer.singleShot(1000, self.removing_from_GUI))
+        # self.timer.setInterval(5000)
+        # self.timer.timeout.connect(self.removing_from_GUI())  # connect it to your update function
+        # self.timer.start()
+        #QTimer.singleShot(5, self.removing_from_GUI)
+        logging.info("kjÃ¸rt gjennom singelshot greiÃ¥")
+
+
+
 
 
     def item_placement_on_GUI(self):
@@ -122,50 +145,43 @@
             self.counted_circle += 1
 
     def removing_from_GUI(self):
-        while True:
-            with self.lock:
-                if self.counter_square > 0:
-                    if self.timer_square[0] < time.perf_counter():
-                        self.radar()
-                        self.x_square.pop(0)
-                        self.y_square.pop(0)
-                        self.timer_square.pop(0)
-                        self.red_square.pop(0)
-                        self.blue_square.pop(0)
-                        self.counter_square -= 1
-                        self.counted_square -= 1
-                        #self.square = True
+        logging.info("look at me, I am mr. REMOVING")
+        if self.counter_square > 0:
+            self.radar()
+            self.x_square.pop(0)
+            self.y_square.pop(0)
+            self.red_square.pop(0)
+            self.blue_square.pop(0)
+            self.counter_square -= 1
+            self.counted_square -= 1
+            #self.square = True
 
-                        for i in range(len(self.x_square)):
-                            # logging.info("Drive_func is about to add remaining boxes")
-                            self.make_square(self.x_square[i], self.y_square[i], color_index=i)
-                        #logging.info("removing box")
+            for i in range(len(self.x_square)):
+                # logging.info("Drive_func is about to add remaining boxes")
+                self.make_square(self.x_square[i], self.y_square[i], color_index=i)
+            #logging.info("removing box")
 
-                        for i in range(len(self.x_circle)):
-                            # logging.info("Drive_func is about to add remaining boxes")
-                            self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)
-                        #logging.info("removed box")
-                        time.sleep(0.5)
+            for i in range(len(self.x_circle)):
+                # logging.info("Drive_func is about to add remaining boxes")
+                self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)
+            #logging.info("removed box")
 
-                if self.counter_circle > 0:
-                    if self.timer_circle[0] < time.perf_counter():
-                        self.radar()
-                        self.x_circle.pop(0)
-                        self.y_circle.pop(0)
-                        self.timer_circle.pop(0)
-                        self.red_circle.pop(0)
-                        self.blue_circle.pop(0)
-                        self.counter_circle -= 1
-                        self.counted_circle -= 1
-                        #logging.info("removing circle")
+        if self.counter_circle > 0:
+            self.radar()
+            self.x_circle.pop(0)
+            self.y_circle.pop(0)
+            self.red_circle.pop(0)
+            self.blue_circle.pop(0)
+            self.counter_circle -= 1
+            self.counted_circle -= 1
+            #logging.info("removing circle")
 
-                        for i in range(len(self.x_square)):
-                            self.make_square(self.x_square[i], self.y_square[i], color_index=i)
+            for i in range(len(self.x_square)):
+                self.make_square(self.x_square[i], self.y_square[i], color_index=i)
 
-                        for i in range(len(self.x_circle)):
-                            self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)
-                        #logging.info("removed circle")
-                        time.sleep(0.5)
+            for i in range(len(self.x_circle)):
+                self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)
+            #logging.info("removed circle")
 
 
 
@@ -247,3 +263,6 @@
 window.show()
 app.exec()
 
+#https://coderslegacy.com/python/pyqt5-qtimer/
+
+
Index: main/include/GUI_med_hÃ¸gare_prosent.py
===================================================================
diff --git a/main/include/GUI_med_hÃ¸gare_prosent.py b/main/include/GUI_med_hÃ¸gare_prosent.py
deleted file mode 100644
--- a/main/include/GUI_med_hÃ¸gare_prosent.py	(revision 64423198641c4edb5e5700289fab879b0426bca5)
+++ /dev/null	(revision 64423198641c4edb5e5700289fab879b0426bca5)
@@ -1,132 +0,0 @@
-import sys
-from PySide6.QtCore import Qt
-from PySide6.QtGui import QPainter, QPixmap, QColor, QFont, QBrush
-from PySide6.QtWidgets import QApplication, QLabel, QMainWindow
-import threading
-import time
-import logging
-
-class MainWindow(QMainWindow):
-    def __init__(self, range:float = 2000., delay: int = 5):
-        super().__init__()
-        self.label = QLabel()
-        self.canvas = QPixmap(700, 700)
-        self.label.setPixmap(self.canvas)
-        self.setCentralWidget(self.label)
-        self.radar()
-
-        self.x = []
-        self.y = []
-        self.timer = []
-        self.red = []
-        self.blue = []
-        self.counter = 0
-        self.counted = 0
-        self.range = range
-        self.delay = delay
-        self.lock = threading.Lock()
-
-    def radar(self):
-        self.canvas.fill(Qt.GlobalColor.white)
-        painter = QPainter(self.canvas)
-        painter.setPen(QColor(Qt.red))
-        painter.setPen(QColor(Qt.red))
-        painter.setFont(QFont('Arial', 20))
-        painter.drawText(348, 35, "0")  # x, y
-        painter.drawText(660, 350, "90")
-        painter.drawText(325, 680, "180")
-        painter.drawText(1, 350, "270")
-        painter.setPen(QColor(Qt.black))
-        painter.drawEllipse(350, 350, 2, 2)
-        painter.drawEllipse(200, 200, 300, 300)
-        painter.drawEllipse(50, 50, 600, 600)
-        painter.end()
-        self.label.setPixmap(self.canvas)
-
-    def make_box(self, x, y, color_index:int):
-        painter = QPainter(self.canvas)
-        brush = QBrush()
-        brush.setColor(QColor(self.red[color_index],0,self.blue[color_index]))
-        brush.setStyle(Qt.BrushStyle.Dense1Pattern)
-        painter.setBrush(brush)
-        painter.drawRect(x, y, 10, 10)
-        painter.end()
-        self.label.setPixmap(self.canvas)
-
-    def make_circle(self, x, y, color_index:int):
-        painter = QPainter(self.canvas)
-        brush = QBrush()
-        brush.setColor(QColor(self.red[color_index],0,self.blue[color_index]))
-        brush.setStyle(Qt.BrushStyle.Dense1Pattern)
-        painter.setBrush(brush)
-        painter.drawEllipse(x, y, 10, 10)
-        painter.end()
-        self.label.setPixmap(self.canvas)
-
-    def coordinate_center(self, x: float, y: float):  # lag et system hvis x/2000 e Ã¸ve 1
-        center_cord_x = (315. * x / self.range) + 340.
-        center_cord_y = -(315. * y / self.range) + 340.
-        return center_cord_x, center_cord_y
-
-    def update_GUI(self, x:float, y:float, hz:int):
-            with self.lock:
-                cord_x, cord_y = self.coordinate_center(x,y)
-                self.x.append(cord_x)
-                self.y.append(cord_y)
-                self.counter += 1
-                self.timer.append(time.perf_counter()+ self.delay)
-                if hz == 260:
-                    self.red.append(0)
-                    self.blue.append(255)
-                elif hz == 440:
-                    self.red.append(255)
-                    self.blue.append(0)
-
-    def item_placement_on_GUI(self):
-        while True:
-            with self.lock:
-                if self.counter > self.counted:
-                    self.make_circle(self.x[self.counter - 1], self.y[self.counter - 1], color_index=(self.counter-1))
-                    self.counted += 1
-
-
-
-                elif self.counter > 0:
-                    if self.timer[0] < time.perf_counter():
-                        self.x.pop(0)
-                        self.y.pop(0)
-                        self.timer.pop(0)
-                        self.red.pop(0)
-                        self.blue.pop(0)
-                        self.counter -= 1
-                        self.counted -= 1
-                        self.radar()
-                        for i in range(len(self.x)):
-                            self.make_box(self.x[i], self.y[i], color_index= i)
-
-
-
-def test():
-    time.sleep(3)
-    window.update_GUI(300, 250, hz= 440)
-    time.sleep(3)
-    window.update_GUI(200, 50, hz= 260)
-    time.sleep(0.1)
-    window.update_GUI(50, 50, hz= 440)
-    time.sleep(3)
-    window.update_GUI(50, 300, hz= 260)
-
-
-
-
-
-app = QApplication(sys.argv)
-window = MainWindow()
-
-x = threading.Thread(target=window.item_placement_on_GUI)
-x2 = threading.Thread(target=test)
-x.start()
-x2.start()
-
-window.show()
-app.exec()
\ No newline at end of file
Index: main/include/test.py
===================================================================
diff --git a/main/include/test.py b/main/include/test.py
deleted file mode 100644
--- a/main/include/test.py	(revision 64423198641c4edb5e5700289fab879b0426bca5)
+++ /dev/null	(revision 64423198641c4edb5e5700289fab879b0426bca5)
@@ -1,4 +0,0 @@
-
-f = 4
-
-print(min(5000., 315.))
\ No newline at end of file
Index: main/include/fisk.py
===================================================================
diff --git a/main/include/fisk.py b/main/include/fisk.py
deleted file mode 100644
--- a/main/include/fisk.py	(revision 64423198641c4edb5e5700289fab879b0426bca5)
+++ /dev/null	(revision 64423198641c4edb5e5700289fab879b0426bca5)
@@ -1,11 +0,0 @@
-from PySide6.QtCore import QTimer
-from PySide6.QtWidgets import QApplication
-import sys
-
-def my_function():
-    print("Timer fired!")
-
-
-app = QApplication(sys.argv)
-QTimer.singleShot(1000, my_function)
-sys.exit(app.exec())
\ No newline at end of file
Index: main/include/shit.py
===================================================================
diff --git a/main/include/shit.py b/main/include/shit.py
deleted file mode 100644
--- a/main/include/shit.py	(revision 64423198641c4edb5e5700289fab879b0426bca5)
+++ /dev/null	(revision 64423198641c4edb5e5700289fab879b0426bca5)
@@ -1,268 +0,0 @@
-import sys
-from PySide6.QtCore import Qt, QTimer, QThreadPool, QRunnable
-from PySide6.QtGui import QPainter, QPixmap, QColor, QFont, QBrush
-from PySide6.QtWidgets import QApplication, QLabel, QMainWindow, QDial, QPushButton
-import threading
-import time
-import logging
-from direction_and_distance_estimation import angle_cord_estimation
-
-
-# class Worker(QRunnable):
-#     def __init__(self, delete):
-#         super().__init__()
-#         shit = MainWindow()
-#     def run(self):
-#         QTimer.singleShot(1000, )
-
-class MainWindow(QMainWindow):
-    def __init__(self, range:float = 2000., delay:int = 5):
-        super().__init__()
-        self.label = QLabel()
-        self.canvas = QPixmap(700, 700)
-        self.label.setPixmap(self.canvas)
-        self.setCentralWidget(self.label)
-        self.setFixedSize(700, 700)
-        self.radar()
-
-        self.x_square = []
-        self.y_square = []
-        self.timer_square = []
-        self.red_square = []
-        self.blue_square = []
-        self.counter_square = 0
-        self.counted_square = 0
-
-        self.x_circle = []
-        self.y_circle = []
-        self.timer_circle = []
-        self.red_circle = []
-        self.blue_circle = []
-        self.counter_circle = 0
-        self.counted_circle = 0
-        self.range = range
-        self.delay = delay
-
-        self.threadpool = QThreadPool()
-
-        # self.timer = QTimer()
-        # self.timer.setInterval(5000)
-        # #self.timer.setSingleShot(True)
-        # self.timer.timeout.connect(self.removing_from_GUI)
-        # self.timer.start()
-
-
-        #self.timer = QTimer()  # set up your QTimer
-
-
-    def radar(self):
-        self.canvas.fill(Qt.GlobalColor.white)
-        painter = QPainter(self.canvas)
-        painter.setPen(QColor(Qt.red))
-        painter.setPen(QColor(Qt.red))
-        painter.setFont(QFont('Arial', 20))
-        painter.drawText(348, 35, "0")  # x, y
-        painter.drawText(660, 350, "90")
-        painter.drawText(325, 680, "180")
-        painter.drawText(1, 350, "270")
-        painter.setPen(QColor(Qt.black))
-        painter.drawEllipse(350, 350, 2, 2)
-        painter.drawEllipse(200, 200, 300, 300)
-        painter.drawEllipse(50, 50, 600, 600)
-        painter.end()
-        self.label.setPixmap(self.canvas)
-        self.update()
-
-
-    def make_square(self, x, y, color_index:int):
-        painter = QPainter(self.canvas)
-        brush = QBrush()
-        brush.setColor(QColor(self.red_square[color_index], 0, self.blue_square[color_index]))
-        brush.setStyle(Qt.BrushStyle.Dense1Pattern)
-        painter.setBrush(brush)
-        painter.drawRect(x, y, 10, 10)
-        painter.end()
-        self.label.setPixmap(self.canvas)
-        self.update()
-
-    def make_circle(self, x, y, color_index:int):
-        painter = QPainter(self.canvas)
-        brush = QBrush()
-        brush.setColor(QColor(self.red_circle[color_index], 0, self.blue_circle[color_index]))
-        brush.setStyle(Qt.BrushStyle.Dense1Pattern)
-        painter.setBrush(brush)
-        painter.drawEllipse(x, y, 10, 10)
-        painter.end()
-        self.label.setPixmap(self.canvas)
-        self.update()
-
-
-    def update_GUI(self, x:float, y:float, hz:int, angle_overrule:bool):
-        if not angle_overrule:
-            x_adjusted_square , y_adjusted_square= self.coordinate_center(x=x, y=y)
-            self.x_square.append(x_adjusted_square)
-            self.y_square.append(y_adjusted_square)
-            self.counter_square += 1
-            if hz == 260:
-                self.red_square.append(0)
-                self.blue_square.append(255)
-            elif hz == 440:
-                self.red_square.append(255)
-                self.blue_square.append(0)
-
-        elif angle_overrule:
-            x_adjusted_circle, y_adjusted_circle = self.coordinate_center(x=x, y=y)
-            self.x_circle.append(x_adjusted_circle)
-            self.y_circle.append(y_adjusted_circle)
-            self.counter_circle += 1
-            if hz == 260:
-                self.red_circle.append(0)
-                self.blue_circle.append(255)
-            elif hz == 440:
-                self.red_circle.append(255)
-                self.blue_circle.append(0)
-
-        self.item_placement_on_GUI()
-        pool = QThreadPool.globalInstance()
-        pool.start(QTimer.singleShot(1000, self.removing_from_GUI))
-        # self.timer.setInterval(5000)
-        # self.timer.timeout.connect(self.removing_from_GUI())  # connect it to your update function
-        # self.timer.start()
-        #QTimer.singleShot(5, self.removing_from_GUI)
-        logging.info("kjÃ¸rt gjennom singelshot greiÃ¥")
-
-
-
-
-
-    def item_placement_on_GUI(self):
-        if self.counter_square > self.counted_square:
-            self.make_square(self.x_square[self.counter_square - 1], self.y_square[self.counter_square - 1], color_index=(self.counter_square - 1))
-            self.counted_square += 1
-
-        elif self.counter_circle > self.counted_circle:
-            self.make_circle(self.x_circle[self.counter_circle - 1], self.y_circle[self.counter_circle - 1], color_index=(self.counter_circle - 1))
-            self.counted_circle += 1
-
-    def removing_from_GUI(self):
-        logging.info("look at me, I am mr. REMOVING")
-        if self.counter_square > 0:
-            self.radar()
-            self.x_square.pop(0)
-            self.y_square.pop(0)
-            self.red_square.pop(0)
-            self.blue_square.pop(0)
-            self.counter_square -= 1
-            self.counted_square -= 1
-            #self.square = True
-
-            for i in range(len(self.x_square)):
-                # logging.info("Drive_func is about to add remaining boxes")
-                self.make_square(self.x_square[i], self.y_square[i], color_index=i)
-            #logging.info("removing box")
-
-            for i in range(len(self.x_circle)):
-                # logging.info("Drive_func is about to add remaining boxes")
-                self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)
-            #logging.info("removed box")
-
-        if self.counter_circle > 0:
-            self.radar()
-            self.x_circle.pop(0)
-            self.y_circle.pop(0)
-            self.red_circle.pop(0)
-            self.blue_circle.pop(0)
-            self.counter_circle -= 1
-            self.counted_circle -= 1
-            #logging.info("removing circle")
-
-            for i in range(len(self.x_square)):
-                self.make_square(self.x_square[i], self.y_square[i], color_index=i)
-
-            for i in range(len(self.x_circle)):
-                self.make_circle(self.x_circle[i], self.y_circle[i], color_index=i)
-            #logging.info("removed circle")
-
-
-
-    def coordinate_center(self, x: float, y: float):  # lag et system hvis x/2000 e Ã¸ve 1
-        center_cord_x = (315. * x / self.range) + 340.
-        center_cord_y = -(315. * y / self.range) + 340.
-        return center_cord_x, center_cord_y
-
-
-
-def test():
-    while True:
-        time.sleep(3)
-        logging.info("Thread test is about to update 1")
-        boat_coords_x, boat_coords_y, dist, average_angle, angle_overrule = boat.timestamp_2_cord(simulation('45'))
-        window.update_GUI(x= boat_coords_x, y=boat_coords_y, hz= 440, angle_overrule= angle_overrule)
-        #logging.info("Thread test is updated 1")
-        time.sleep(3)
-        #logging.info("Thread test is about to update 2")
-        window.update_GUI(x=50, y=50, hz= 260, angle_overrule= False)
-        time.sleep(2)
-        window.update_GUI(x=1000, y=1000, hz= 440, angle_overrule= True)
-        #logging.info("Thread test is updated 2")
-        time.sleep(3)
-        #logging.info("Thread test is about to update 3")
-        window.update_GUI(x=-1500, y=1500, hz= 260, angle_overrule= False)
-        #logging.info("Thread test is updated 3")
-
-def simulation(boat_placment):
-    tdoa_78 = [0, 0.019, 0.029, 0.048]
-    tdoa_45 = [0.0, 0.0, 0.03498542274, 0.03498542274]
-    tdoa_34 = [0., (1.37 + 0.92) / 343, (1.37 + 0.92 + 9.506) / 343, (1.37 + 0.92 + 9.506 + 1.438 + 0.809) / 343]
-
-    if boat_placment == '78':
-        # static simulate time delay of arrive
-        # -------------------------------------------------
-        t1 = tdoa_78[0]
-        t2 = tdoa_78[1]
-        t3 = tdoa_78[2]
-        t4 = tdoa_78[3]
-        mic = {'m1': t3, 'm2': t4, 'm3': t1, 'm4': t2}
-
-    if boat_placment == '45':
-        t1 = tdoa_45[0]
-        t2 = tdoa_45[1]
-        t3 = tdoa_45[2]
-        t4 = tdoa_45[3]
-        mic = {'m1': t3, 'm2': t4, 'm3': t1, 'm4': t2}
-
-    if boat_placment == '34':
-        t1 = tdoa_34[0]
-        t2 = tdoa_34[1]
-        t3 = tdoa_34[2]
-        t4 = tdoa_34[3]
-        mic = {'m1': t4, 'm2': t3, 'm3': t2, 'm4': t1}
-
-    tdoa = [mic['m1'], mic['m3'], mic['m2'], mic['m4']]
-
-    return tdoa
-
-
-
-app = QApplication(sys.argv)
-window = MainWindow()
-boat = angle_cord_estimation(dist_short_mic=12, spd_sound=343, max_distance=2000)
-
-#window.show()
-#x1 = threading.Thread(target=window.upd, args=())
-format = "%(asctime)s: %(message)s"
-
-logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")
-
-
-x2 = threading.Thread(target=test)
-
-x2.start()
-
-
-window.show()
-app.exec()
-
-#https://coderslegacy.com/python/pyqt5-qtimer/
-
-
